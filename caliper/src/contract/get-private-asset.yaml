test:
  name: get-private-asset
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `basic` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the 'getPrivateAsset()' API method. Successive rounds create
    and retrieve assets of larger byteSize.
  workers:
    type: local
    number: 10
  rounds:
    - label: get-private-asset-evaluate-100
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 100 bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          create_sizes:
            - 100
            - 200
            - 500
            - 1000
            - 2000
            - 5000
            - 10000
          assets: 1000
          byteSize: 100
          consensus: false
    - label: get-private-asset-evaluate-200
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 200 bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          assets: 1000
          byteSize: 200
          consensus: false
    - label: get-private-asset-evaluate-500
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 500 bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          byteSize: 500
          assets: 1000
          consensus: false
    - label: get-private-asset-evaluate-1000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 1000 bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          byteSize: 1000
          assets: 1000
          consensus: false
    - label: get-private-asset-evaluate-2000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 2000 bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          byteSize: 2000
          assets: 1000
          consensus: false
    - label: get-private-asset-evaluate-5000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 5000 bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          byteSize: 5000
          assets: 1000
          consensus: false
    - label: get-private-asset-evaluate-10000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 10000
        bytes.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 50
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          byteSize: 10000
          assets: 1000
          consensus: false
    - label: get-private-asset-evaluate-8000-fixed-tps
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `basic` Smart Contract method named `getPrivateAsset`. This method
        performs a getPrivateData on an item that matches an asset of size 8000 bytes
        at a fixed TPS.
      contractId: basic
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 350
      workload:
        module: lib/get-private-asset.js
        arguments:
          contractId: basic
          noSetup: true
          byteSize: 8000
          assets: 1000
          consensus: false
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001